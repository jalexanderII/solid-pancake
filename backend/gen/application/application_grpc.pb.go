// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package application

import (
	context "context"
	common "github.com/jalexanderII/solid-pancake/gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationClient is the client API for Application service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationClient interface {
	Apply(ctx context.Context, in *ApplicationReq, opts ...grpc.CallOption) (*ApplicationRes, error)
	ReadApplicationRequest(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*ApplicationReq, error)
	UpdateApplicationRequest(ctx context.Context, in *ApplicationReq, opts ...grpc.CallOption) (*ApplicationReq, error)
	DeleteApplicationRequest(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*ApplicationReq, error)
	ListApplicationRequests(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ListApplicationReqOut, error)
	ReadApplicationResponse(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*ApplicationRes, error)
	DeleteApplicationResponse(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*ApplicationRes, error)
	ListApplicationResponse(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ListApplicationResOut, error)
}

type applicationClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationClient(cc grpc.ClientConnInterface) ApplicationClient {
	return &applicationClient{cc}
}

func (c *applicationClient) Apply(ctx context.Context, in *ApplicationReq, opts ...grpc.CallOption) (*ApplicationRes, error) {
	out := new(ApplicationRes)
	err := c.cc.Invoke(ctx, "/application.Application/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) ReadApplicationRequest(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*ApplicationReq, error) {
	out := new(ApplicationReq)
	err := c.cc.Invoke(ctx, "/application.Application/ReadApplicationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) UpdateApplicationRequest(ctx context.Context, in *ApplicationReq, opts ...grpc.CallOption) (*ApplicationReq, error) {
	out := new(ApplicationReq)
	err := c.cc.Invoke(ctx, "/application.Application/UpdateApplicationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) DeleteApplicationRequest(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*ApplicationReq, error) {
	out := new(ApplicationReq)
	err := c.cc.Invoke(ctx, "/application.Application/DeleteApplicationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) ListApplicationRequests(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ListApplicationReqOut, error) {
	out := new(ListApplicationReqOut)
	err := c.cc.Invoke(ctx, "/application.Application/ListApplicationRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) ReadApplicationResponse(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*ApplicationRes, error) {
	out := new(ApplicationRes)
	err := c.cc.Invoke(ctx, "/application.Application/ReadApplicationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) DeleteApplicationResponse(ctx context.Context, in *common.ID, opts ...grpc.CallOption) (*ApplicationRes, error) {
	out := new(ApplicationRes)
	err := c.cc.Invoke(ctx, "/application.Application/DeleteApplicationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) ListApplicationResponse(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ListApplicationResOut, error) {
	out := new(ListApplicationResOut)
	err := c.cc.Invoke(ctx, "/application.Application/ListApplicationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServer is the server API for Application service.
// All implementations should embed UnimplementedApplicationServer
// for forward compatibility
type ApplicationServer interface {
	Apply(context.Context, *ApplicationReq) (*ApplicationRes, error)
	ReadApplicationRequest(context.Context, *common.ID) (*ApplicationReq, error)
	UpdateApplicationRequest(context.Context, *ApplicationReq) (*ApplicationReq, error)
	DeleteApplicationRequest(context.Context, *common.ID) (*ApplicationReq, error)
	ListApplicationRequests(context.Context, *common.Empty) (*ListApplicationReqOut, error)
	ReadApplicationResponse(context.Context, *common.ID) (*ApplicationRes, error)
	DeleteApplicationResponse(context.Context, *common.ID) (*ApplicationRes, error)
	ListApplicationResponse(context.Context, *common.Empty) (*ListApplicationResOut, error)
}

// UnimplementedApplicationServer should be embedded to have forward compatible implementations.
type UnimplementedApplicationServer struct {
}

func (UnimplementedApplicationServer) Apply(context.Context, *ApplicationReq) (*ApplicationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedApplicationServer) ReadApplicationRequest(context.Context, *common.ID) (*ApplicationReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplicationRequest not implemented")
}
func (UnimplementedApplicationServer) UpdateApplicationRequest(context.Context, *ApplicationReq) (*ApplicationReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationRequest not implemented")
}
func (UnimplementedApplicationServer) DeleteApplicationRequest(context.Context, *common.ID) (*ApplicationReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationRequest not implemented")
}
func (UnimplementedApplicationServer) ListApplicationRequests(context.Context, *common.Empty) (*ListApplicationReqOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicationRequests not implemented")
}
func (UnimplementedApplicationServer) ReadApplicationResponse(context.Context, *common.ID) (*ApplicationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApplicationResponse not implemented")
}
func (UnimplementedApplicationServer) DeleteApplicationResponse(context.Context, *common.ID) (*ApplicationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationResponse not implemented")
}
func (UnimplementedApplicationServer) ListApplicationResponse(context.Context, *common.Empty) (*ListApplicationResOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicationResponse not implemented")
}

// UnsafeApplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServer will
// result in compilation errors.
type UnsafeApplicationServer interface {
	mustEmbedUnimplementedApplicationServer()
}

func RegisterApplicationServer(s grpc.ServiceRegistrar, srv ApplicationServer) {
	s.RegisterService(&Application_ServiceDesc, srv)
}

func _Application_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).Apply(ctx, req.(*ApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_ReadApplicationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).ReadApplicationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/ReadApplicationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).ReadApplicationRequest(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_UpdateApplicationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).UpdateApplicationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/UpdateApplicationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).UpdateApplicationRequest(ctx, req.(*ApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_DeleteApplicationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).DeleteApplicationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/DeleteApplicationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).DeleteApplicationRequest(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_ListApplicationRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).ListApplicationRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/ListApplicationRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).ListApplicationRequests(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_ReadApplicationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).ReadApplicationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/ReadApplicationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).ReadApplicationResponse(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_DeleteApplicationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).DeleteApplicationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/DeleteApplicationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).DeleteApplicationResponse(ctx, req.(*common.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_ListApplicationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).ListApplicationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/ListApplicationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).ListApplicationResponse(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Application_ServiceDesc is the grpc.ServiceDesc for Application service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Application_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.Application",
	HandlerType: (*ApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _Application_Apply_Handler,
		},
		{
			MethodName: "ReadApplicationRequest",
			Handler:    _Application_ReadApplicationRequest_Handler,
		},
		{
			MethodName: "UpdateApplicationRequest",
			Handler:    _Application_UpdateApplicationRequest_Handler,
		},
		{
			MethodName: "DeleteApplicationRequest",
			Handler:    _Application_DeleteApplicationRequest_Handler,
		},
		{
			MethodName: "ListApplicationRequests",
			Handler:    _Application_ListApplicationRequests_Handler,
		},
		{
			MethodName: "ReadApplicationResponse",
			Handler:    _Application_ReadApplicationResponse_Handler,
		},
		{
			MethodName: "DeleteApplicationResponse",
			Handler:    _Application_DeleteApplicationResponse_Handler,
		},
		{
			MethodName: "ListApplicationResponse",
			Handler:    _Application_ListApplicationResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application/application.proto",
}
